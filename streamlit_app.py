import streamlit as st
from langchain.llms import OpenAI
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.chains import RetrievalQA
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import Chroma, Pinecone
from langchain.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA
import os

def generate_response( openai_api_key, query_text):
    os.environ["OPENAI_API_KEY"] = openai_api_key
    # API KEY

    import pinecone

    pinecone.init(
        api_key="8a5d141e-c4a3-4baa-9f05-fa3840dd6a0b",
        environment="eu-west4-gcp",
    )

    ## Model initilization
    llm_name = "gpt-4-1106-preview"
    llm = ChatOpenAI(model_name=llm_name, temperature=0)

    # Template creation
    template = """<Hukuki konularda danÄ±ÅŸmanlÄ±k veren yÃ¼ksek derecede uzmanlaÅŸmÄ±ÅŸ bir AI agent olarak davranacaksÄ±n. SorumluluÄŸun kullanÄ±cÄ± tarafÄ±ndan sorulan, hukuk ile ilgili karmaÅŸÄ±k sorulara cevap vermektir. VerdiÄŸin yanÄ±tlar, yalnÄ±zca baÄŸlamda yer alan bilgilere dayanmalÄ±dÄ±r. Ancak, baÄŸlamda yer alan bÃ¼tÃ¼n bilgileri kullanmak zorunda deÄŸilsin. KullanÄ±cÄ±nÄ±n sorduÄŸu soruyu analiz etmelisin ve yalnÄ±zca bu soruya cevap olacak baÄŸlam bilgilerini kullanmalÄ±sÄ±n. Bunun haricinde, verdiÄŸin yanÄ±tlar ÅŸu standartlarla uyumlu olmalÄ±dÄ±r:  \

    - Dil ÅžartlarÄ±: TÃ¼m yanÄ±tlarÄ± akÄ±cÄ±, profesyonel seviyede TÃ¼rkÃ§e olarak sun. En yÃ¼ksek dil kalitesini korumak iÃ§in TÃ¼rkÃ§e dilbilgisi, sÃ¶zdizimi ve noktalama iÅŸaretlerine dikkat et. \

    - Konu SÄ±nÄ±rlamasÄ±: Cevap, verilen baÄŸlam iÃ§erisinde yer almÄ±yorsa veya soru hukuki bir soru deÄŸilse, "Bu soruya cevap vermem mÃ¼mkÃ¼n deÄŸildir. Hukuki alandaki sorularÄ±nÄ±zda size yardÄ±mcÄ± olmaktan memnuniyet duyarÄ±m." diyerek cevap ver ve sakÄ±n baÅŸka bir cevap hazÄ±rlama. \

    - Hedef Kitle: Unutma, temel kullanÄ±cÄ±larÄ±n hukuk alanÄ±ndaki profesyoneller - avukatlar, yargÄ±Ã§lar ve savcÄ±lardÄ±r. Dilini ve aÃ§Ä±klamalarÄ±nÄ±, onlarÄ±n hukuki terimler ve kavramlar konusundaki ileri dÃ¼zey bilgilerine uygun hale getir. Profesyonel dil kullanÄ±mÄ±nÄ± sÃ¼rdÃ¼rÃ¼rken, yanÄ±tlarÄ±nÄ±n hedeflenen hukuki kitle tarafÄ±ndan aÃ§Ä±k ve kolayca anlaÅŸÄ±labilir olduÄŸundan emin ol. Bilgiyi belirsiz hale getirebilecek aÅŸÄ±rÄ± karmaÅŸÄ±k cÃ¼mlelerden kaÃ§Ä±n. \

    - CevaplarÄ±n YapÄ±sÄ±: CevabÄ±nÄ± mantÄ±klÄ± bir ÅŸekilde dÃ¼zenle. Sorunun kÄ±sa bir Ã¶zeti ile baÅŸla, ardÄ±ndan detaylÄ± bir analizle devam et ve son olarak Ã¶zlÃ¼ bir sonuÃ§ veya Ã¶zet ifade ile bitir.

    - CevaplarÄ±n SpesifikliÄŸi: Sorulara yanÄ±t verirken, yalnÄ±zca hukuki konulara odaklan. DetaylÄ±, kesin, aÃ§Ä±k ve hukuki olarak saÄŸlam tavsiyeler veya aÃ§Ä±klamalar sunmalÄ±sÄ±n. CevabÄ±nÄ± bildiÄŸin sorular iÃ§in hazÄ±rladÄ±ÄŸÄ±n yanÄ±tlarda kesinlikle baÄŸlamda yer almayan bilgi olmamalÄ± ve cevap iÃ§erisinde tekrara dÃ¼ÅŸmemelisin. YanÄ±tlarÄ±nÄ± her zaman dÃ¼zenle, dÃ¼zelt ve kullanÄ±cÄ±ya tam cevap verdiÄŸinden emin ol. \

    - Kaynak GÃ¶sterme: SaÄŸladÄ±ÄŸÄ±n her cevap iÃ§in, bilginin alÄ±ndÄ±ÄŸÄ± belgeyi, varsa kanunu veya yÃ¶netmeliÄŸi belirtmek, referansÄ±n doÄŸru ve sorulan soruyla alakalÄ± olduÄŸundan emin olunmasÄ± aÃ§Ä±sÄ±ndan hayati Ã¶neme sahiptir. Bu atÄ±f, belgenin adÄ±nÄ±, bÃ¶lÃ¼m numarasÄ±nÄ± ve varsa ilgili alt bÃ¶lÃ¼mlerini iÃ§erebilir. Ancak, baÄŸlamlarÄ± kullanarak yanÄ±t hazÄ±rladÄ±ÄŸÄ±nÄ± cevabÄ±nda kesinlikle belirtmemelisin. \

    - Tavsiye KapsamÄ±: Bilgi saÄŸlarken, kiÅŸisel gÃ¶rÃ¼ÅŸler, yorumlar veya hukuki tavsiyeler sunmaktan kaÃ§Ä±nmak Ã¶nemlidir. GÃ¶revin, bir bilgi aracÄ± olmak, hukuki belgelerde belirtilen gerÃ§ekleri ve detaylarÄ±, genelleme veya kiÅŸisel yargÄ± olmadan sunmaktÄ±r. BaÄŸlamda aÃ§Ä±kÃ§a sunulmamÄ±ÅŸ olan konularda varsayÄ±mlar yapmaktan veya Ã§Ä±karÄ±mlardan kaÃ§Ä±n.\

    - Sorgu YÃ¶netimi: Her soruya odaklanarak yanÄ±t ver, yanÄ±t oluÅŸturmadan Ã¶nce soruyu tamamen anladÄ±ÄŸÄ±ndan emin ol. Ã‡ok yÃ¶nlÃ¼ veya belirsiz hukuki sorularÄ±n olduÄŸu durumlarda, daha fazla bilgi alabilmek iÃ§in ekstra sorular sorabilirsin. Gerekirse, baÄŸlamda bulunan incelikleri veya farklÄ± yorumlarÄ± belirt, ele alÄ±nan hukuki konunun kapsamlÄ± bir gÃ¶rÃ¼nÃ¼mÃ¼nÃ¼ saÄŸla. \

    - Etik Hususlar: YanÄ±tlarÄ±nda her zaman en yÃ¼ksek hukuki etik standartlarÄ±na baÄŸlÄ± kal. TÃ¼m cevaplarÄ±nda gizliliÄŸe, tarafsÄ±zlÄ±ÄŸa ve hukuk sisteminin bÃ¼tÃ¼nlÃ¼ÄŸÃ¼ne saygÄ± gÃ¶ster. \

    Bu yÃ¶nergeleri takip ederek, gÃ¶revin, hukuki karar alma sÃ¼recini iyileÅŸtirmek, hukuki eÄŸitime yardÄ±mcÄ± olmak ve doÄŸru, iyi kaynaklanmÄ±ÅŸ ve profesyonelce ifade edilmiÅŸ hukuki bilgilerle adli sistemini desteklemektir.> \

    <kullanÄ±cÄ± sorusu>{question}</kullanÄ±cÄ± sorusu>

    <baÄŸlam>{context}</baÄŸlam>
    """
    QA_CHAIN_PROMPT = PromptTemplate.from_template(template)

    # Vector Database mounting
    embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
    persist_directory = 'docs/chroma/'
    # vectordb = Chroma(persist_directory=persist_directory, embedding_function=embeddings)
    index_name = "llm-hukuk-butun"
    vectordb = Pinecone.from_existing_index(index_name, embeddings)

    # Chain initilization
    qa_chain = RetrievalQA.from_chain_type(
        llm,
        retriever=vectordb.as_retriever(),  # search_type='mmr'
        return_source_documents=True,
        chain_type_kwargs={"prompt": QA_CHAIN_PROMPT}
    )
    result = qa_chain({"query": query_text})
    return result["result"]

# Page title
st.set_page_config(page_title='ðŸ“– Plus Lawyer Chatbot')
st.title('ðŸ“– Plus Lawyer Chatbot')

# File upload
#uploaded_file = st.file_uploader('Upload an article', type='txt')
# Query text
query_text = st.text_input('LÃ¼tfen sorunuzu giriniz: ', placeholder = 'Karakter limiti yoktur, sorularÄ±nÄ±zÄ± aÃ§Ä±k bir ÅŸekilde sorabilirsiniz.')#, disabled=not uploaded_file)

# Form input and query
result = []
with st.form('myform', clear_on_submit=True):
    openai_api_key = st.text_input('OpenAI API Key', type='password', disabled=not (query_text))
    submitted = st.form_submit_button('GÃ¶nder', disabled=not(query_text))
    if submitted and openai_api_key.startswith('sk-'):
        with st.spinner('Analiz Ediliyor...'):
            response = generate_response(openai_api_key, query_text)
            result.append(response)
            del openai_api_key

if len(result):
    st.info(response)
